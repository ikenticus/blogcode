#!/bin/bash
#
# Kubernetes Control shortcut commands
#

export TERM=vt100
export COLUMNS=250

jobs=$(kubectl get jobs 2> /dev/null | grep -v NAME | awk '{ print $1 }')
names=$(kubectl get pods -o jsonpath="{..app_name}" | tr [[:space:]] "\n" | sort -u)
help() {
    echo -e "\nUsage: ${0##*/} <partial-app-name> [<pod-num>] [<cmds>]\n"
    cat << EOF
Apps:
$names
use     Show usage of nodes
use #   Dump usage of number in node list (- for all)

Jobs:
$jobs

Pod Num:
-       All pods running app
#       Select number in pod list matching app
get<?>  Get <?> for all pods running app (empty for help)
wide<?> Get <?> for all pods running app (wide display for supported <?> calls)
json<?> Get <?> for all pods running app in JSON
yaml<?> Get <?> for all pods running app in YAML
desc<?> Describe <?> for all pods running app (empty for help)
use     Dump usage of pods running app
reset   Reset the resources (pass options in <cmds> or help)
scale   Scale all pods running app (pass options in <cmds> or help)
auto    Alter the autoscale settings (pass options in <cmds> or help)

Commands:
info    Show pod(s) and app container info
json	Get pod(s) app configuration in JSON
logs    Dump pod(s) app logs
nginx   Dump pod(s) nginx-lite logs
replace Replace pod(s) with same configuration
reqlog  Dump pod(s) requestlogger logs
res     Get pod(s) container resources
tail    Tail pod(s) appe logs 100 lines
tailf   Tail pod(s) app logs 25 lines and follow
yaml	Get pod(s) app configuration in YAML
*       Exec shell commands on pod(s) app container

Shell Commands:
df      Human Disk Free
ls      Long List Feed Downloads
ps      Full Wide Process List
ss      Curl Service Status
sh      Enter Bash Shell
*       Any non-lazy commands not listed above

EOF
    exit 0
}

app=$1; shift
if [ -z "$app" ]; then
    help
fi

num=$1; shift
cmds=$@

lazy() {
    local cmds=$@
    case $cmds in
        df) echo "df -h" ;;
        err) echo "ls -laR /tmp/feed/error" ;;
        is) echo "ls -laR /tmp/feed/download.infostrada" ;;
        ls) echo "ls -la /tmp/feed" ;;
        ps) echo "ps -efww" ;;
        ss) echo "curl localhost:8080/service_status" ;;
        sdi) echo "ls -laR /tmp/feed/download.sdi" ;;
        sh) echo "/bin/bash" ;;
        *) echo $cmds ;;
    esac
}

deploy() {
    local act=$1; shift
    local app=$1; shift
    local opt=$@
    if [ "$opt" == "help" ]; then
        case $act in
            reset) echo "Reset options (from res): --requests=cpu=100m,memory=256Mi --limits=cpu=200m,memory=512Mi" ;;
            scale) echo "Scale options (from gethpa: --replicas=2 --current-replicas=1" ;;
        esac
    else
        local dep=$(kubectl get deployment --selector=app_name=$app | tail -1 | awk '{ print $1 }')
        case $act in
            reset) kubectl set resources deployment $dep -c $app $opt ;;
            scale) kubectl scale deployment/$dep $opt ;;
        esac
    fi
    exit 0
}

auto() {
    local app=$1; shift
    local opt=$@
    if [ "$opt" == "help" ]; then
        echo "Autoscale options (from gethpa): cpu=80 min=2 max=4"
    else
        local auto=$(kubectl get hpa --selector=app_name=$app | tail -1 | awk '{ print $1 }')
        for o in $opt; do
            IFS==
            set -- $o
            unset IFS
            case $1 in
                cpu) kubectl patch hpa $auto --patch '{"spec":{"targetCPUUtilizationPercentage":'$2'}}' ;;
                max) kubectl patch hpa $auto --patch '{"spec":{"maxReplicas":'$2'}}' ;;
                min) kubectl patch hpa $auto --patch '{"spec":{"minReplicas":'$2'}}' ;;
            esac
        done
    fi
    exit 0
}

run() {
    local pod=$1
    local app=${2%-queue}
    echo -e "\n> Pod: $pod, Container: $app"
    cmds=$(lazy $cmds)
    case $cmds in
        info) echo kubectl $pod -c $app ;;
        json) kubectl get pod $pod -o json ;;
        logs) kubectl logs $pod -c $app ;;
        nginx) kubectl logs $pod -c nginx-lite ;;
        replace) kubectl get pod $pod -o yaml | kubectl replace --force -f - ;;
        reqlog) kubectl logs $pod -c requestlogger ;;
        res) kubectl get pod $pod -o yaml | grep -B1 -A6 resources ;;
        tail) kubectl logs $pod -c $app --tail=100 ;;
        tailf) kubectl logs $pod -c $app --tail=25 -f ;;
        yaml) kubectl get pod $pod -o yaml ;;
        *) kubectl exec -it $pod -c $app -- $cmds
    esac
}

use() {
    local num=$1
    if [ -z "$num" ]; then
        kubectl top node
    else
        nodes=$(kubectl get nodes | grep -v NAME | awk '{ print $1 }')
        if [ "$num" != "-" ]; then
            node=$(echo $nodes | tr [[:space:]] "\n" | head -$num | tail -1)
        fi
        kubectl describe node $node
    fi
    exit 0
}

# check for non-pod commands first and exit
case $app in
   use) use $num $cmds ;;
esac

context=$(echo $names | tr [[:space:]] "\n" | grep $app | head -1)
test=$(echo $context)
if [ -z "${test//* */}" ]; then
    IFS=-
    set -- $app
    unset IFS
    context=$(echo $names | tr [[:space:]] "\n" | egrep ".*${1}.*-.*${2}.*" | head -1)
    if [ -z "$context" ]; then
        context=$(echo $jobs | tr [[:space:]] "\n" | egrep ".*${app}.*" | head -1)
        if [ -z "$context" ]; then
            echo Invalid app: $app
            echo Choose from: $names
            help
        else
            isJOB=1
        fi
    fi
fi
echo MATCHED: $context

if [ -z "$cmds" ]; then
    case $num in
        get*) kubectl get ${num#get} --selector=app_name=$context ;;
        desc*) kubectl describe ${num#desc} --selector=app_name=$context ;;
        json*) kubectl get ${num#json} -o json --selector=app_name=$context ;;
        use) kubectl top pod --selector=app_name=$context ;;
        wide*) kubectl get ${num#wide} -o wide --selector=app_name=$context ;;
        yaml*) kubectl get ${num#yaml} -o yaml --selector=app_name=$context ;;
        *) kubectl get pods --selector=app_name=$context ;;
    esac
else
    if [ -z "$isJOB" ]; then
        pods=$(kubectl get pods --selector=app_name=$context | grep Running | awk '{ print $1 }')
    else
        pods=$(kubectl get pods --selector=job-name=$context | grep -v NAME | awk '{ print $1 }')
    fi
    if [ "$num" != "-" ]; then
       case $num in
            --) pods=--selector=app_name=$context ;;
            auto) auto $context $cmds ;;
            reset) deploy reset $context $cmds ;;
            scale) deploy scale $context $cmds ;;
            [0-9]*) pods=$(echo $pods | tr [[:space:]] "\n" | head -$num | tail -1) ;;
            *) echo "$num is not a valid pod number!" ; exit 1 ;;
        esac
    fi
    for p in $pods; do
        run $p $context
    done
fi
